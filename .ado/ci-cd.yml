trigger:
  branches:
    include:
      - main

variables:
  - group: SecurityKeys

  - name: azureSubscription
    value: haipv25-svc

  - name: resourceGroup
    value: rg_fsa_f1_csm_ec_huutn

  - name: location
    value: southeastasia

  - name: appDev
    value: haipv25-webapp-dev

  - name: appStg
    value: haipv25-webapp-stg

  - name: appProd
    value: haipv25-webapp

  - name: artifactName
    value: drop

  - name: mavenPom
    value: pom.xml

  - name: mavenTargetDir
    value: src/webapp/target

stages:
  # ====== STAGE 1: INFRA ======
  - stage: Infra
    displayName: Deploy Infrastructure
    jobs:
      - job: DeployInfra
        pool:
          name: "Default"
        steps:
          - checkout: self
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Deploy Infra (Bicep)
            inputs:
              deploymentScope: "Resource Group"
              azureResourceManagerConnection: "$(azureSubscription)"
              subscriptionId: "788f2671-c295-4d6e-b5b6-b1535aafefef"
              action: "Create Or Update Resource Group"
              resourceGroupName: "$(resourceGroup)"
              location: "$(location)"
              templateLocation: "Linked artifact"
              csmFile: "infra/main.bicep"
              deploymentName: "appgwDeployment_$(Build.BuildId)"

  # ====== STAGE 2: BUILD ======
  - stage: Build
    displayName: Build & Test
    jobs:
      - job: MavenBuild
        pool:
          name: "Default"
        steps:
          - checkout: self
          - task: Cache@2
            displayName: Cache Maven repo
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
              path: ~/.m2/repository
          - task: Maven@4
            displayName: Build & Unit Test
            inputs:
              mavenPomFile: "$(mavenPom)"
              goals: "clean verify"
          - task: Maven@4
            displayName: Security Scan (OWASP)
            inputs:
              mavenPomFile: "$(mavenPom)"
              goals: "org.owasp:dependency-check-maven:check"
              options: "-Xmx4g -Dnvd.apiKey=$(NVD_API_KEY)"
            env:
              NVD_API_KEY: $(nvd.api.key)
          - task: PublishBuildArtifacts@1
            displayName: Publish Artifact
            inputs:
              PathtoPublish: "$(mavenTargetDir)"
              ArtifactName: "$(artifactName)"

  # ====== STAGE 3: DEPLOY DEV (Rolling) ======
  - stage: Deploy_Dev
    displayName: Deploy to Dev (Rolling)
    dependsOn:
      - Infra
      - Build
    jobs:
      - deployment: DeployDev
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: Deploy Dev
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(appDev)
                    package: "$(Pipeline.Workspace)/$(artifactName)/*.jar"

  # ====== STAGE 4: DEPLOY STAGING (Canary) ======
  - stage: Deploy_Staging
    displayName: Deploy to Staging (Canary)
    dependsOn:
      - Infra
      - Build
    jobs:
      - deployment: DeployStaging
        environment: staging
        strategy:
          canary:
            increments: [10, 50, 99]
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: Deploy Staging Canary
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(appStg)
                    package: "$(Pipeline.Workspace)/$(artifactName)/*.jar"

  # ====== STAGE 5: DEPLOY PROD (Blue-Green) ======
  - stage: Deploy_Prod
    displayName: Deploy to Prod (Blue-Green)
    dependsOn:
      - Deploy_Dev
      - Deploy_Staging
    jobs:
      - deployment: DeployProd
        environment: production
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: Deploy to Staging Slot
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(appProd)
                    slotName: staging
                    package: "$(Pipeline.Workspace)/$(artifactName)/*.jar"

                - task: AzureCLI@2
                  displayName: Swap Slot to Prod
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: ps
                    scriptLocation: inlineScript
                    inlineScript: az webapp deployment slot swap -g $(resourceGroup) -n $(appProd) --slot staging --target-slot production
